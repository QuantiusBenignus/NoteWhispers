#!/usr/bin/zsh
# Should work also for users of bash, replace the above shebang with the path to 'bash'

# MIT License

# Copyright (c) 2022 Quantius Benignus

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#--------------------------------------------------------------------------

# NAME: vm (named for brevity and quick access, check your PATH for conflicts and rename accordingly if needed.) 
show_help() {
echo "Records a voice memo from the default input channel (microphone),"
echo " or uses an audio file as the input." 
echo "Transcribes into text using whisper.cpp (a C/C++ port of Open AI's Whisper engine)"
echo " and either:" 
echo "       - sends it to the clipboard"
echo "       - or creates a new note in a running instance of the Joplin note-taking app"
#    "         using curl to access Joplin's data API (see details below)"
echo "       - if Joplin is not running, stores the transcription in a file" 
echo -e "\n"
echo "SYNOPSIS: vm [b|c|bc|cb|help|-h|--help|filename] ... [filename]"
echo -e "\n"
#    "the first argument chooses one of the special-format whisper.cpp model files to use for inference."
echo "       - 'vm h|help|-h|--help' will print this text" 
echo "       - 'vm'   the default is to use the 'tiny' model file and create a note in Joplin" 
echo "       - 'vm b' will transcribe to a Joplin note using the larger (more accurate but slower) 'base' model"
echo "       - 'vm c' will transcribe with the default 'tiny' model file but output to the clipboard"
echo "       - 'vm bc' or 'vm cb' uses the 'base' model file and outputs to the clipboard"
echo "       - any other first argument forces sox to treat it as an audio file to be converted"
echo "       - the existence of a second argument forces sox to treat it as an audio file to be converted"
#    "(tested on Ubuntu 22.04 LTS under Gnome version 42.5 (Wayland))"
exit 0 
}
# PREREQUSITES: 
#      - Joplin desktop installation with WebClipper plugin (see https://joplinapp.org/)   
#      - whisper.cpp installation (see https://github.com/ggerganov/whisper.cpp) 
#      - recent versions of 'sox', 'curl', 'xsel' command line utilities from your system's repositories.
#--------------------------------------------------------------------------

#Check dependencies
command -v sox &>/dev/null || { echo "sox is required. Please, install sox" >&2 ; exit 1 ; }
command -v curl &>/dev/null || { echo "curl is required. Please, install curl" >&2 ; exit 1 ; }
command -v xsel &>/dev/null || { echo "xsel is required. Please, install xsel" >&2 ; exit 1 ; }
command -v transcribe &>/dev/null || { echo -e "Please, install whisper.cpp (see https://github.com/ggerganov/whisper.cpp)\
\nand create 'transcribe' in your PATH as a symbolic link to the main executable, e.g.\n \
 'ln -s /full/path/to/whisper.cpp/main \$HOME/bin/transcribe'" >&2 ; exit 1 ; }
#Hear the complaints of the above tools:
set -e

# Store temp files in memory for speed and to reduce SSD/HDD "grinding":
TEMPD='/dev/shm'
#If Joplin is not running, store transcription files in Joplin configuration directory for later processing. 
JOPLIND=$HOME'/.config/joplin-desktop/resources'  #of course you can choose another place.

# These are for the Joplin data API. 
# The first parameter is the id of the Joplin notebook where the new note will be created.
# The token is generated by the web clipper plugin in Joplin. (Make sure web clipper is installed). 
# PLEASE, REPLASE WITH YOUR OWN FROM YOUR INSTANCE OF THE JOPLIN DESKTOP APP FOR LINUX:
NOTEBOOK_ID="f8492c........0a2f551bdde"   # In my case the notebook is named VoiceMemos
AUTH_TOKEN="cd93de696edd929af03ef8a828bf3b6a.......................409b4bde28e81880d9549b9569"

# Clipboard flag, when set the output goes to the clipboard instead of creating a new note:
unset clip
notopt=0
# Clumsy argument parser, the default is to use the 'tiny' model for speed and create a new note in Joplin:
model="$TEMPD/ggml-tiny.en.bin"
case $1 in
	b) model="$TEMPD/ggml-base.en.bin"   ;;
        bc|cb)   
           model="$TEMPD/ggml-base.en.bin"
           clip="1" 
           ;;
	c) clip="1"                          ;;
	h|h|help|--help)
           show_help
           ;;
	*) notopt="$#"                       ;;
esac

# You must have moved the model files (e.g. ggml-tiny.en.bin, see case parser above) to the tmpfs TEMPD in memory:
# This can be done once per session using your .zshr (or .bashrc) file by placing something like this in it:
# ([ -f /dev/shm/ggml-tiny.en.bin ] || cp /path/to/your/local/whisper.cpp/models/ggml* /dev/shm/)
[[ -r $model ]] || { echo "Model file not found or not readable!" ; exit 1 ; }

#[ -v $ramf ] || ramf="$(mktemp -p /dev/shm/ vmXXXX)"
# Hardcoded temp wav file to store the voice memo and get overwritten every time (in RAM):
ramf="$TEMPD/vmfile"
# A unrecognized 1st arg or a 2nd argument will be treated as a filename and sox will try to convert to a wav file suitable for transcription:
if [[ $notopt -gt 0 ]] && [[ -f $1 ]]; then 
   echo -e '>>>>>>>>>>>>>>>>\n Loading audio from file...\n>>>>>>>>>>>>>>>\n'
# Here we are tasking sox with error handling:
   sox $1 -t wav $ramf channels 1 rate 16k norm  
elif [[ $# -gt 1 ]] && [[ -f $2 ]]; then
# Same here, sox has the right to complain:
   echo -e '>>>>>>>>>>>>>>>>\n Loading audio from file...\n>>>>>>>>>>>>>>>\n'
   sox $2 -t wav $ramf channels 1 rate 16k norm
elif [[ $# -gt 1 ]] || [[ $notopt -gt 0 ]]; then
   echo -e '>>>>>>>>>>>>>>>>\n Invalid Arguments!!!\n>>>>>>>>>>>>>>>\n'
   show_help
else
# sox typically requires user input (CTRL-C) to stop recording from the microphone, this prevents the whole script from "overreacting":
   trap "echo -e '>>>>>>>>>>>>>>>>\n Done recording\n>>>>>>>>>>>>>>>\n'" SIGINT
# recording in wav format at 16k rate, the only currently accepted by whisper.cpp:
# Attempts to stop on silence of 2s with threshold of 6%, if in doubt press CTRL-C: 
   rec -t wav $ramf rate 16k silence 1 0.1 3% 1 2.0 6%
fi
 
echo -e '>>>>>>>>>>>>>>>>\n Now transcribing...\n>>>>>>>>>>>>>>>\n'
# transcribe is a symbolic link (somewhere in your path) to the compiled "main" executable in the whisper.cpp directory.
# For example: in your ~/bin> create it with `ln -s /full/path/to/whisper.cpp/main $HOME/bin/transcribe`
# The transcribed text is stored in a file (-otxt), in this case /dev/shm/vmfile.txt 
transcribe -nt -m $model -f $ramf -otxt

# I prefer to add a timestamp for time tracking of my notes:
noted="$(date +%Y%m%d-%H%M%S)"
 
# If clipboard flag is set, we dump everything in the clipboard (make sure xsel is installed, e.g. apt install xsel) and exit:
[[ $clip ]] && { echo $noted': ' | cat - $ramf.txt | xsel -bi && echo -e ">>>>>>>>>>>>>>>\n Copied to clipboard!\n>>>>>>>>>>>>>>>\n" ; exit 0 ; }

# Otherwise we will use the Joplin data API:
# Let's prepare a JSON payload (in a temp file in memory) to pass to curl: 
echo -e '{ "title": "'$noted'", "parent_id":"'$NOTEBOOK_ID'", "body": "## '$noted'  \\n---\\n>' > $TEMPD/vmjson 
# In my case parent_id is the Joplin id of a notebook named VoiceMemos  
cat $ramf.txt >> $TEMPD/vmjson
echo -e '\\n\\n "}' >> $TEMPD/vmjson

# Let's ping the server to see if the REST API is available (if not, store the json payload for later):
[[ $(curl http://localhost:41184/ping) != 'JoplinClipperServer' ]] && { cp $TEMPD/vmjson $JOPLIND/$noted.json && 
echo -e "\nIt seems that Joplin is not runnig! \nMemo saved for later in "$JOPLIND/$noted.json; exit 0 ; } 

# We contact the Joplin REST API with curl using the prepared JSON payload in the file "vmjson":
curl -d @$TEMPD/vmjson -o $TEMPD/curlout "http://localhost:41184/notes?token="$AUTH_TOKEN
echo -e '>>>>>>>>>>>>>>>>\n New note created!\n>>>>>>>>>>>>>>>\n'
# You should find the newly created note (with the timestamp for a title) in the notebook of your choice. 

